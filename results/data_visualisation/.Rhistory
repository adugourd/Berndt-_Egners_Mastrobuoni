batches[batches == 0] <- NA
batches <- log2(batches)
magicPlotMaker(batches,"~/Documents/Thorsten_liver_model/results/data_visualisation/")
#.        .       .       .       . . . . .
#.        .       .       .       . . . . .
#.        .       .       .       . . . . .
#ProteinM 5454    NA      987     . . . . 9987
#Basically you need columns as sample(or conditions) and rows as individuals(Proteins, genes, whatever..) that are measured in each condition
magicPlotMaker <- function(df, outpath){
setwd(outpath)
print("Dimension of dataframe :")
print(dim(df))
##This part is just to generate the melted dataframe for ggplot
df$ID <- row.names(df)
melted_df <- melt(df)
index <- c(1:length(melted_df[,1]))
df <- df[,-length(df[1,])]
#########################################
##                ggplots              ##
#########################################
a <- ggplot(melted_df, aes(x = value, fill = variable)) + geom_density(alpha = 0.3) + theme_minimal()
b <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_point() + theme_minimal()
c <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_boxplot() + theme_minimal()
print(a)
ggsave("densities.pdf", plot = a, device = pdf)
ggsave("cloud_point.pdf", plot = b, device = pdf)
ggsave("box_plot.pdf", plot = c, device = pdf)
#########################################
##                PCA                  ##
#########################################
complete_df <- df[complete.cases(df),]
print("Dimension of complete cases :")
print(dim(complete_df))
t_complete_df <- t(complete_df)
PCA <- prcomp(t_complete_df ,center = TRUE, scale. = T)
pdf("boulder_plot.pdf")
plot(PCA)
dev.off()
pdf("PCA.pdf")
plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples")
text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3)
dev.off()
#########################################
##                heatmap              ##
#########################################
pheatmap(t_complete_df, show_colnames =  FALSE, filename = "profil_heatmap.pdf")
pheatmap(cor(complete_df), filename = "correlation_heatmap.pdf")
}
magicPlotMaker(batches,"~/Documents/Thorsten_liver_model/results/data_visualisation/")
magicPlotMaker <- function(df, outpath, echo = FALSE){
setwd(outpath)
print("Dimension of dataframe :")
print(dim(df))
##This part is just to generate the melted dataframe for ggplot
df$ID <- row.names(df)
melted_df <- melt(df)
index <- c(1:length(melted_df[,1]))
df <- df[,-length(df[1,])]
#########################################
##                ggplots              ##
#########################################
a <- ggplot(melted_df, aes(x = value, fill = variable)) + geom_density(alpha = 0.3) + theme_minimal()
b <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_point() + theme_minimal()
c <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_boxplot() + theme_minimal()
ggsave("densities.pdf", plot = a, device = pdf)
ggsave("cloud_point.pdf", plot = b, device = pdf)
ggsave("box_plot.pdf", plot = c, device = pdf)
#########################################
##                PCA                  ##
#########################################
complete_df <- df[complete.cases(df),]
print("Dimension of complete cases :")
print(dim(complete_df))
t_complete_df <- t(complete_df)
PCA <- prcomp(t_complete_df ,center = TRUE, scale. = T)
pdf("boulder_plot.pdf")
plot(PCA)
dev.off()
pdf("PCA.pdf")
plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples")
text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3)
dev.off()
d <-
#########################################
##                heatmap              ##
#########################################
pheatmap(t_complete_df, show_colnames =  FALSE, filename = "profil_heatmap.pdf")
pheatmap(cor(complete_df), filename = "correlation_heatmap.pdf")
if (echo = TRUE) {
print(a)
print(b)
print(c)
print(plot(PCA))
print(plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples"))
print(text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3))
print(pheatmap(t_complete_df, show_colnames =  FALSE))
pheatmap(cor(complete_df))
}
}
magicPlotMaker <- function(df, outpath, echo = FALSE){
setwd(outpath)
print("Dimension of dataframe :")
print(dim(df))
##This part is just to generate the melted dataframe for ggplot
df$ID <- row.names(df)
melted_df <- melt(df)
index <- c(1:length(melted_df[,1]))
df <- df[,-length(df[1,])]
#########################################
##                ggplots              ##
#########################################
a <- ggplot(melted_df, aes(x = value, fill = variable)) + geom_density(alpha = 0.3) + theme_minimal()
b <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_point() + theme_minimal()
c <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_boxplot() + theme_minimal()
ggsave("densities.pdf", plot = a, device = pdf)
ggsave("cloud_point.pdf", plot = b, device = pdf)
ggsave("box_plot.pdf", plot = c, device = pdf)
#########################################
##                PCA                  ##
#########################################
complete_df <- df[complete.cases(df),]
print("Dimension of complete cases :")
print(dim(complete_df))
t_complete_df <- t(complete_df)
PCA <- prcomp(t_complete_df ,center = TRUE, scale. = T)
pdf("boulder_plot.pdf")
plot(PCA)
dev.off()
pdf("PCA.pdf")
plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples")
text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3)
dev.off()
d <-
#########################################
##                heatmap              ##
#########################################
pheatmap(t_complete_df, show_colnames =  FALSE, filename = "profil_heatmap.pdf")
pheatmap(cor(complete_df), filename = "correlation_heatmap.pdf")
if (echo = TRUE) {
print(a)
print(b)
print(c)
print(plot(PCA))
print(plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples"))
print(text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3))
print(pheatmap(t_complete_df, show_colnames =  FALSE))
pheatmap(cor(complete_df))
}
}
magicPlotMaker <- function(df, outpath, echo = FALSE){
setwd(outpath)
print("Dimension of dataframe :")
print(dim(df))
##This part is just to generate the melted dataframe for ggplot
df$ID <- row.names(df)
melted_df <- melt(df)
index <- c(1:length(melted_df[,1]))
df <- df[,-length(df[1,])]
#########################################
##                ggplots              ##
#########################################
a <- ggplot(melted_df, aes(x = value, fill = variable)) + geom_density(alpha = 0.3) + theme_minimal()
b <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_point() + theme_minimal()
c <- ggplot(melted_df, aes(x = index, y = value, group = variable, color = variable)) + geom_boxplot() + theme_minimal()
ggsave("densities.pdf", plot = a, device = pdf)
ggsave("cloud_point.pdf", plot = b, device = pdf)
ggsave("box_plot.pdf", plot = c, device = pdf)
#########################################
##                PCA                  ##
#########################################
complete_df <- df[complete.cases(df),]
print("Dimension of complete cases :")
print(dim(complete_df))
t_complete_df <- t(complete_df)
PCA <- prcomp(t_complete_df ,center = TRUE, scale. = T)
pdf("boulder_plot.pdf")
plot(PCA)
dev.off()
pdf("PCA.pdf")
plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples")
text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3)
dev.off()
d <-
#########################################
##                heatmap              ##
#########################################
pheatmap(t_complete_df, show_colnames =  FALSE, filename = "profil_heatmap.pdf")
pheatmap(cor(complete_df), filename = "correlation_heatmap.pdf")
if (echo == TRUE) {
print(a)
print(b)
print(c)
print(plot(PCA))
print(plot(PCA$x[,1],PCA$x[,2], pch = 19, xlab = paste("PC1 (",as.character(round(PCA$sdev[1]^2/sum(PCA$sdev^2)*100)),"%)"), ylab = paste("PC2 (",as.character(round(PCA$sdev[2]^2/sum(PCA$sdev^2)*100)),"%)"), main = "PCA of samples"))
print(text(PCA$x[,1],PCA$x[,2], labels = names(PCA$x[,1]), pos = 3))
print(pheatmap(t_complete_df, show_colnames =  FALSE))
pheatmap(cor(complete_df))
}
}
?pheatmap
View(batches)
#Just renaming the column so it look nicer
control_names <- gsub("lfq.intensity.unknown-black6-ctrl_ctrl","Control_", names(batches))
cancer_names <- gsub("lfq.intensity.m-16w-wt","Cancer", names(batches))
control_names
cancer_names
nice_names <- c(control_names[c(1:14)],cancer_names[c(15:28)])
nice_names
names(batches) <- nice_names
View(batches)
library(limma)
>duplicateCorrelation()
duplicateCorrelation()
?duplicateCorrelation
library(readxl)
library(limma)
library(ggplot2)
library(ggfortify)
#Get the dataset
Proteom_Daten_Bl6_vs_16w_AG_Kempa <- as.data.frame(read_excel("~/Documents/Thorsten_liver_model/data/Proteom-Daten Bl6 vs 16w AG Kempa.xlsx"))
names(Proteom_Daten_Bl6_vs_16w_AG_Kempa) <- Proteom_Daten_Bl6_vs_16w_AG_Kempa[1,]
#Extract the measurement matrix, which will be used for the differential expression analysis
batches <- Proteom_Daten_Bl6_vs_16w_AG_Kempa[-1,c(7:34)]
batches <- as.data.frame(apply(batches,2,function(x) as.numeric(x)) )
row.names(batches) <- gsub("[;].*","",Proteom_Daten_Bl6_vs_16w_AG_Kempa[-1,1])
batches[batches == 0] <- NA
batches <- log2(batches)
#This function allows you to visualise the samples, and how they compare to each others
magicPlotMaker(batches,"~/Documents/Thorsten_liver_model/results/data_visualisation/")
#Just renaming the column so it look nicer
control_names <- gsub("lfq.intensity.unknown-black6-ctrl_ctrl","Control_", names(batches))
cancer_names <- gsub("lfq.intensity.m-16w-wt","Cancer", names(batches))
#This part averages the technical replicates
for (i in c(1,3,5,7,9,11,13,15,17,19,21,23,25,27))
{
batches[[as.character(i)]] <- rowMeans(batches[,c(i,i+1)], na.rm = TRUE)
}
batches <- batches[,c(29:42)]
#this part filters out the protein that are not relevant fo differential analysis (measured in only one of the two conditions)
batches <- batches[rowSums(is.na(batches)) < 13,]
names(batches)[c(1,2,3,4,5,6,7)] <- control_names[c(1,3,5,7,9,11,13)]
names(batches)[c(8,9,10,11,12,13,14)] <- cancer_names[c(15,17,19,21,23,25,27)]
batches <- batches[rowSums(is.na(batches[,c(1,2,3,4,5,6,7)])) < 7 & rowSums(is.na(batches[,c(8,9,10,11,12,13,14)])) < 7,]
magicPlotMaker(batches,"~/Documents/Thorsten_liver_model/results/data_visualisation/")
targets <- readTargets("~/Documents/Thorsten_liver_model/src/target.txt", row.names = "Sample")
f <- factor(targets$condition, levels = c("control","cancer"))
design <- model.matrix(~0+f)
corfit <- duplicateCorrelation(batches,design)
corfit <- duplicateCorrelation(batches,design, ndups = 1)
fit <- lmFit(batches, design,block=targets$Sample)
cont.matrix <- makeContrasts(tumVsCtrl = fcancer-fcontrol,
levels = design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tableTop <- topTable(fit2, coef = 1, adjust = "fdr", n = 1886)
results <- decideTests(fit2, p.value = 0.1, adjust.method = "fdr")
volcanoplot(fit2, names = fit2$genes$ID)
volcano_nice(tableTop, 0.1, 0.5, 1, 5)
#This is a function designed to generate plots facilitated the visualisation of large datasets.
#Copyright (C) 2016  Aurelien Dugourd
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
library(ggplot2)
#df = result from limma differnecial expression (with column X as identifier column)
#gtt = gene to term table
#consensus = consensus table of piano analisys (with column X as term column)
#outpath = path to the directory were the figures will be stored
#mt = mapping table between the identifiers of limma analisys and gene to term table
volcano_nice <- function(df,hAss,vAss,FCIndex,pValIndex){
df <- df[complete.cases(df),]
hAss <- -log(hAss)
names(df)[FCIndex] <- "logFC"
names(df)[pValIndex] <- "adj.P.Val"
xlimAbs <- ceiling(abs(max(df[,FCIndex])))
ylimAbs <- ceiling(abs(max(-log(df[,pValIndex]))))
xneg <- function(x) abs(hAss-1+x/(x+vAss))
xpos <- function(x) abs(hAss-1+x/(x-vAss))
test <- function(x,y,vAss){
if (x < -vAss) {
if (xneg(x) < -log(y)) {
return("1")
}
else {
return("0")
}
}
else {
if (x > vAss){
if (xpos(x) < -log(y)) {
return("1")
}
else {
return("0")
}
}
else {
return("0")
}
}
}
df$couleur <- "0"
df$couleur <- apply(df, 1, FUN = function(x) test(as.numeric(x[FCIndex]),as.numeric(x[pValIndex]), vAss))
df_005 <- subset(df, couleur == "1")
if (length(df_005[,1]) > 0)
{
a <- ggplot(df, aes(x = logFC, y = -log(adj.P.Val), color = couleur)) +
geom_point(alpha = 0.5) +
#geom_text(aes(label = df_005$X, vjust = -1.5, nudge_y = 0.5, hjust = 0.15, check_overlap = TRUE)) +
stat_function(fun = xneg, xlim = c(-xlimAbs,-vAss), color = "black", alpha = 0.7) +
ylim(c(0,ylimAbs)) + xlim(c(-xlimAbs,xlimAbs)) +
stat_function(fun = xpos, xlim = c(vAss,xlimAbs), color = "black", alpha = 0.7) +
scale_colour_manual(values = c("grey30","royalblue3")) +
theme_minimal() +
theme(legend.position = "none")
}
else
{
a <- ggplot(df, aes(x = logFC, y = -log(adj.P.Val), color = couleur)) +
geom_point(alpha = 0.5) +
stat_function(fun = xneg, xlim = c(-xlimAbs,-vAss), color = "black", alpha = 0.7) +
ylim(c(0,ylimAbs)) + xlim(c(-xlimAbs,xlimAbs)) +
stat_function(fun = xpos, xlim = c(vAss,xlimAbs), color = "black", alpha = 0.7) +
scale_colour_manual(values = c("grey30","royalblue3")) +
theme_minimal() +
theme(legend.position = "none")
}
return(a)
}
volcano_genesets <- function(df, gtt, consensus, outpath, mt = NULL, get_df = 0) {
gtt <- as.data.frame(apply(gtt, 2, function(x) toupper(x)))
names(gtt) <- c("gene","term")
colnames(df)[1] <- "X"
colnames(consensus)[1] <- "X"
if (!is.null(mt))
{
mt <- apply(mt, 2, function(x) toupper(x))
names(mt) <- c("X","gene")
gtt <- merge(gtt,mt, all = FALSE)
names(gtt) <- c("gene","term","X")
}
else
{
names(gtt) <- c("X","term")
}
df$X <- toupper(df$X)
df <- merge(df,gtt, all = FALSE)
setwd(outpath)
terms <- consensus$X
for (term in terms)
{
subDf <- df[df$term == term,]
if (length(subDf[,1]) > 4)
{
print(term)
print(length(subDf[,1]))
#normalized <- (subDf$AveExpr-min(subDf$AveExpr))/(max(subDf$AveExpr)-min(subDf$AveExpr))
a <- volcano_nice(subDf,0.05,0.5,7,6)
print("yo")
ggsave(paste(term,".pdf"), a, device = pdf)
}
}
if (get_df == 1){
return(df)
}
}
volcano_nice(tableTop, 0.1, 0.5, 1, 5)
?eBayes
?consensusScores
library(piano)
?consensusScores
gsaRes1 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "mean")
gsaRes2 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "median")
gsaRes3 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "sum")
gsaRes4 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "maxmean")
resList <- list(gsaRes1,gsaRes2,gsaRes3,gsaRes4)
names(resList) <- c("mean","median","sum","maxmean")
ch <- consensusHeatmap(resList,cutoff=50,method="median", ncharLabel = 50, cellnote = "medianPvalue", cex = 0.2, plot = FALSE)
consensus_mm_no_reac <- ch$pMat
head(consensus_mm_no_reac)
library(ggplot2)
library(piano)
library(reshape)
library(readr)
tableTop <- read.csv("/home/ad234505/Thorsten_liver_model/results/tableTop.csv")
tableTop <- tableTop[complete.cases(tableTop),]
gene_to_term <- as.data.frame(read_csv("/home/ad234505/Thorsten_liver_model/src/gene_to_term.csv"))
mapping_unip_to_geneName <- read.delim("/home/ad234505/Thorsten_liver_model/src/mapping_uniprot_to_name.txt")
names(mapping_unip_to_geneName) <- c("unip","gene")
mapping_unip_to_geneName$gene <- toupper(mapping_unip_to_geneName$gene)
gene_to_term <- merge(gene_to_term, mapping_unip_to_geneName, all = FALSE)
gene_to_term_no_reac <- gene_to_term[grep("REACTOME",gene_to_term[,"term"], invert = TRUE),]
geneSet <- loadGSC(gene_to_term_no_reac[,c(3,2)])
myFC <- tableTop$logFC
names(myFC) <- tableTop$X
myPval <- tableTop$adj.P.Val
names(myPval) <- tableTop$X
myTval <- tableTop$t
names(myTval) <- tableTop$X
library(ggplot2)
library(piano)
library(reshape)
library(readr)
tableTop <- read.csv("~/Documents/Thorsten_liver_model/results/tableTop.csv")
tableTop <- tableTop[complete.cases(tableTop),]
gene_to_term <- as.data.frame(read_csv("~/Documents/Thorsten_liver_model/src/gene_to_term.csv"))
mapping_unip_to_geneName <- read.delim("~/Documents/Thorsten_liver_model/src/mapping_uniprot_to_name.txt")
names(mapping_unip_to_geneName) <- c("unip","gene")
mapping_unip_to_geneName$gene <- toupper(mapping_unip_to_geneName$gene)
gene_to_term <- merge(gene_to_term, mapping_unip_to_geneName, all = FALSE)
gene_to_term_no_reac <- gene_to_term[grep("REACTOME",gene_to_term[,"term"], invert = TRUE),]
geneSet <- loadGSC(gene_to_term_no_reac[,c(3,2)])
myFC <- tableTop$logFC
names(myFC) <- tableTop$X
myPval <- tableTop$adj.P.Val
names(myPval) <- tableTop$X
myTval <- tableTop$t
names(myTval) <- tableTop$X
gsaRes1 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "mean")
gsaRes2 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "median")
gsaRes3 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "sum")
gsaRes4 <- runGSA(myTval, gsc=geneSet, adjMethod = "fdr", geneSetStat = "maxmean")
resList <- list(gsaRes1,gsaRes2,gsaRes3,gsaRes4)
names(resList) <- c("mean","median","sum","maxmean")
ch <- consensusHeatmap(resList,cutoff=50,method="median", ncharLabel = 50, cellnote = "medianPvalue", cex = 0.2, plot = FALSE)
consensus_mm_no_reac <- ch$pMat
consensusScores(resList, class = "distinct", direction = "down")
piano::consensusScores(resList, class = "distinct", direction = "down")
?runGSAhyper
library(BioNet)
library(igraph)
library(XML)
library(readr)
tableTop <- as.data.frame(read_csv("~/Documents/Thorsten_liver_model/results/tableTop.csv"))
tableTop <- as.data.frame(tableTop[complete.cases(tableTop),])
omniPKN <- read_delim("~/Documents/Thorsten/omniPKN_16_03_17.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
STRING_PPI_800 <- read_delim("~/Documents/Thorsten/src/STRING_PPI_800.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
STRING_PPI_800 <- as.data.frame(STRING_PPI_800)
STRING_uniprot_to_Gene <- read_delim("~/Documents/Thorsten/src/STRING_uniprot_to_Gene.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
ttop_uniprot_to_Gene <- read_delim("~/Documents/Thorsten_liver_model/src/ttop_unip_to_name.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
names(ttop_uniprot_to_Gene) <- c("unip","gene")
names(STRING_uniprot_to_Gene)[1] <- "Accession"
STRING_PPI_800 <- merge(STRING_PPI_800,STRING_uniprot_to_Gene)
STRING_PPI_800 <- STRING_PPI_800[,c(7,2,3,4,5,6)]
names(STRING_uniprot_to_Gene) <- c("Accession2","Gene2")
STRING_PPI_800 <- merge(STRING_PPI_800,STRING_uniprot_to_Gene)
STRING_PPI_800 <- STRING_PPI_800[,c(2,7,3,4,5,6)]
names(ttop_uniprot_to_Gene)[1] <- "X1"
tableTop <- merge(tableTop,ttop_uniprot_to_Gene)
tableTop <- tableTop[,c(8,2,3,4,5,6,7)]
row.names(tableTop) <- tableTop$gene
pval <- as.vector(tableTop$P.Val)
names(pval) <- row.names(tableTop)
fdr <- as.vector(tableTop$adj.P.Val)
names(fdr) <- row.names(tableTop)
logFC <- tableTop$logFC
names(logFC) <- row.names(tableTop)
#interactome <- graph_from_data_frame(omniPKN, directed = TRUE, vertices = NULL)
interactome <- graph_from_data_frame(STRING_PPI_800, directed = TRUE, vertices = NULL)
subnet <- subNetwork(row.names(tableTop), interactome,neighbors="first")
subnet <- rmSelfLoops(subnet)
subnet<-largestComp(subnet)
subnet_nodes <- (V(subnet)$name)
stats_genes <- intersect(subnet_nodes,row.names(tableTop))
fb <- fitBumModel(pval)
fb
scores <- scoreNodes(subnet, fb, fdr = 0.0005)
scores <- round(scores, 4)
writeHeinzEdges(network=subnet, file="~/Documents/Thorsten_liver_model/src/Network_edges.txt", use.score=FALSE)
writeHeinzNodes(network=subnet, file="~/Documents/Thorsten_liver_model/src/Network_nodes.txt", node.scores=scores)
run_heinz_cmd <- paste('heinz-mc -e ', "~/Documents/Thorsten_liver_model/src/Network_edges.txt", ' -n ', "~/Documents/Thorsten_liver_model/src/Network_nodes.txt", ' -o ', "~/Documents/Thorsten_liver_model/results/Heinz_solution.txt",sep='')
system(run_heinz_cmd)
module <- readHeinzGraph(node.file="~/Documents/Thorsten_liver_model/results/Heinz_solution.txt", network=subnet)
nodeDataDefaults(module, attr='score') <- ''
nodeDataDefaults(module, attr='FC') <- ''
nodeDataDefaults(module, attr='FDR') <- ''
nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]
nodeData(module, n=nodes(module), attr='FC') <- logFC[nodes(module)]
nodeData(module, n=nodes(module), attr='FDR') <- fdr[nodes(module)]
edgeDataDefaults(module, attr = 'sign') <- ''
temp <- STRING_PPI_800[STRING_PPI_800[,1] %in% nodes(module) & STRING_PPI_800[,2] %in% nodes(module),]
temp <- temp[temp[,1] != temp[,2],]
edgeData(module, temp[,1], temp[,2], attr = 'sign') <- as.character(temp[,4])
module_igraph <- igraph.from.graphNEL(module)
sig <- nodes(module)
background <- tableTop$gene
runGSAhyper(genes = sig, universe = background, gsc = geneSet, adjMethod = "fdr")
sig
background
gene_to_term_no_reac[,c(3,2)]
geneSet <- loadGSC(gene_to_term_no_reac[,c(1,2)])
runGSAhyper(genes = sig, universe = background, gsc = geneSet, adjMethod = "fdr")
test <- runGSAhyper(genes = sig, universe = background, gsc = geneSet, adjMethod = "fdr")
View(test$resTab)
test$resTab
test$contingencyTable
View(gene_to_term_no_reac)
sig <- toupper(sig)
background <- toupper(background)
test <- runGSAhyper(genes = sig, universe = background, gsc = geneSet, adjMethod = "fdr")
View(test$resTab)
?largestComp
?fitBumModel
?scoreNodes
?fitBumModel
